#Takes a boolean argument or "allow-downgrade".

#If set to true, all DNS lookups are DNSSEC-validated locally (excluding LLMNR and Multicast DNS). If the response to a lookup request is detected to be invalid a lookup failure is
#returned to applications. Note that this mode requires a DNS server that supports DNSSEC. If the DNS server does not properly support DNSSEC all validations will fail.

#If set to "allow-downgrade", DNSSEC validation is attempted, but if the server does not support DNSSEC properly, DNSSEC mode is automatically disabled. Note that this mode makes
#DNSSEC validation vulnerable to "downgrade" attacks, where an attacker might be able to trigger a downgrade to non-DNSSEC mode by synthesizing a DNS response that suggests DNSSEC was
#not supported.

#If set to false, DNS lookups are not DNSSEC validated. In this mode, or when set to "allow-downgrade" and the downgrade has happened, the resolver becomes security-unaware and all
#forwarded queries have DNSSEC OK (DO) bit unset.

#Note that DNSSEC validation requires retrieval of additional DNS data, and thus results in a small DNS lookup time penalty.

#DNSSEC requires knowledge of "trust anchors" to prove data integrity. The trust anchor for the Internet root domain is built into the resolver, additional trust anchors may be
#defined with dnssec-trust-anchors.d(5). Trust anchors may change at regular intervals, and old trust anchors may be revoked. In such a case DNSSEC validation is not possible
#until new trust anchors are configured locally or the resolver software package is updated with the new root trust anchor. In effect, when the built-in trust anchor is revoked
#and DNSSEC= is true, all further lookups will fail, as it cannot be proved anymore whether lookups are correctly signed, or validly unsigned. If DNSSEC= is set to
#"allow-downgrade" the resolver will automatically turn off DNSSEC validation in such a case.

#Client programs looking up DNS data will be informed whether lookups could be verified using DNSSEC, or whether the returned data could not be verified (either because the data
#was found unsigned in the DNS, or the DNS server did not support DNSSEC or no appropriate trust anchors were known). In the latter case it is assumed that client programs employ
#a secondary scheme to validate the returned DNS data, should this be required.
#It is recommended to set DNSSEC= to true on systems where it is known that the DNS server supports DNSSEC correctly, and where software or trust anchor updates happen regularly. On
#other systems it is recommended to set DNSSEC= to "allow-downgrade".

#In addition to this global DNSSEC setting systemd-networkd.service(8) also maintains per-link DNSSEC settings. For system DNS servers (see above), only the global
#DNSSEC setting is in effect. For per-link DNS servers the per-link setting is in effect, unless it is unset in whic case the global setting is used instead.

#Site-private DNS zones generally conflict with DNSSEC operation, unless a negative (if the private zone is not signed) or positive (if the private zone is signed) trust
#anchor is configured for them. If "allow-downgrade" mode is selected, it is attempted to detect site-private DNS zones using top-level domains (TLDs) that are not known by the DNS
#root server. This logic does not work in all private zone setups.
#Default: allow-downgrade

DNSSEC=no
